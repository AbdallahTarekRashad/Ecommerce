"""
Django settings for Ecommerce project.

Generated by 'django-admin startproject' using Django 3.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '!vo2bhu54lnnjbquccjnmw2a+%2y6gj6t_23w2x9h=c+1qcsmy'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    # for jet admin dashboard
    'jet',
    'jet.dashboard',
    # default apps for django
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # for override widget template_name
    'django.forms',
    # for phone django-phone-field
    'phone_field',
    # widget tweaks to render form input in template
    'widget_tweaks',
    # for sign in with social media accounts
    'social_django',
    # rest framework
    'rest_framework',
    'rest_framework.authtoken',
    # social auth with rest auth
    'rest_social_auth',
    # for doc api using Swagger and ReDoc
    'drf_yasg',
    # for periodic tasks by time
    'django_crontab',
    'django_cron',
    # my apps
    'accounts',
    'products',
]
# change form render for change template_name in widget
FORM_RENDERER = 'django.forms.renderers.TemplatesSetting'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Ecommerce.urls'
TEMPLATE_DIR = BASE_DIR / 'templates'
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATE_DIR]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # backends context processor will load a backends key in the context with three entries on it:
                # associated
                # It’s a list of UserSocialAuth instances related with the currently logged in user.
                # Will be empty if there’s no current user.
                # not_associated
                # A list of available backend names not associated with the current user yet.
                # If there’s no user logged in, it will be a list of all available backends.
                # backends
                # A list of all available backend names.
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
                # for site_info
                'accounts.context_processors.basic_info',
            ],
            'libraries': {
                'extra_tags': 'templatetags.extra_tags',

            }
        },
    },
]

WSGI_APPLICATION = 'Ecommerce.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'ecommerce',
        'USER': 'ecommerce',
        'PASSWORD': '123456',
        'HOST': 'localhost',
        'PORT': '',
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/
# Static Dirs
STATIC_URL = '/static/'
STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static'),)
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Media Dirs
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = "/media/"

# Locale Dir (For Language Files)
LOCALE_PATHS = [os.path.join(BASE_DIR, 'locale')]

# Login and Logout Url
LOGIN_REDIRECT_URL = ''
LOGOUT_REDIRECT_URL = '/login'
LOGIN_URL = '/login'
LOGOUT_URL = '/logout'
SOCIAL_AUTH_LOGIN_REDIRECT_URL = '/'

# google auth
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = '90017384042-a8if8h3lp315s7hu15gq4q42brb6j742.apps.googleusercontent.com'
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = 'NC_2Us5zPvtwxq_WapaGpkd_'

# if you need to add scopes you should be verified from google
# SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = [
#     'https://www.googleapis.com/auth/userinfo.email',
#     'https://www.googleapis.com/auth/userinfo.profile',
#     'https://www.googleapis.com/auth/user.birthday.read',
#     'https://www.googleapis.com/auth/user.gender.read',
# ]
SOCIAL_AUTH_GOOGLE_OAUTH2_PROFILE_EXTRA_PARAMS = {
    'fields': 'id, name, email, picture.type(large)'
}
SOCIAL_AUTH_GOOGLE_OAUTH2_EXTRA_DATA = [
    ('name', 'name'),
    ('email', 'email'),
    ('picture', 'picture'),
]

# facebook app secret and key
SOCIAL_AUTH_FACEBOOK_KEY = '2856578691265320'
SOCIAL_AUTH_FACEBOOK_SECRET = 'd7a3c8fe39ee9c02bfc5c9ca1dac7a35'
SOCIAL_AUTH_FACEBOOK_SCOPE = ['email', 'user_link', 'user_gender']
SOCIAL_AUTH_FACEBOOK_PROFILE_EXTRA_PARAMS = {
    'fields': 'id, first_name, last_name, email, picture.type(large), link, gender'
}
SOCIAL_AUTH_FACEBOOK_EXTRA_DATA = [
    ('first_name', 'first_name'),
    ('last_name', 'last_name'),
    ('email', 'email'),
    ('picture', 'picture'),
    ('link', 'profile_url'),
    ('gender', 'gender')
]

SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.user.create_user',
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
    # this pipeline for save data get in extra data in our account.User model
    'accounts.pipeline.save',
)

# Auth User
AUTH_USER_MODEL = 'accounts.User'

#  to use the built-in JSONB field to store the extracted extra_data.
# SOCIAL_AUTH_POSTGRES_JSONFIELD = True
# if you need to custom namespace of urls
SOCIAL_AUTH_URL_NAMESPACE = 'social'

AUTHENTICATION_BACKENDS = [
    # for auth with facebook & linkedin & google & twitter
    # 'social_core.backends.linkedin.LinkedinOAuth2',
    'social_core.backends.google.GoogleOAuth2',
    'social_core.backends.facebook.FacebookOAuth2',
    # 'social_core.backends.twitter.TwitterOAuth',
    'django.contrib.auth.backends.ModelBackend',
]

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Rest framework setting
REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    # 'DEFAULT_PERMISSION_CLASSES': ['rest_framework.permissions.IsAuthenticated'],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # 'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 5,
    # for custom render class
    'DEFAULT_RENDERER_CLASSES': ['accounts.api.json_render.JsonRendererNew'],
    # for swagger
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
    # Parser classes priority-wise for Swagger
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.MultiPartParser',
        # 'rest_framework.parsers.FormParser',
        # 'rest_framework.parsers.JSONParser',
    ],
}

SESSION_ENGINE = 'accounts.session_backend'
# For Periodic Tasks
CRON_CLASSES = [
    "accounts.periodic_task.CleanCards",
]

